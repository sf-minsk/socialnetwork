{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hoc/withAuthRedirect.tsx","assets/images/userWhithoutAvatar.png","components/Profile/Myposts/MyPosts.module.css","components/Profile/Myposts/Post/Post.module.css","components/Profile/ProfileInfo/contentLogo.png","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","content","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","Contact","contactTitle","contactValue","contact","ProfileData","profile","isOwner","onEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","keys","contacts","map","key","onClick","ProfileDataFormRedux","reduxForm","form","error","handleSubmit","onSubmit","formError","createField","Input","type","TextArea","ProfileInfo","Preloader","src","logo","alt","style","display","descriptionBlock","photos","large","userPhoto","name","target","files","photo","savePhoto","formData","saveProfile","then","initialValues","Post","item","message","likeCount","maxLength30","maxLengthCreator","minLength2","minLengthCreator","AddPostForm","this","Field","component","placeholder","validate","required","React","AddPostFormRedux","MyPosts","memo","postsElements","posts","p","id","postsBlock","values","addPost","newPostBody","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.b0195dc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__gpbrc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1nUcf\",\"contact\":\"ProfileInfo_contact__1szlV\",\"formError\":\"ProfileInfo_formError__3uYnz\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","export default __webpack_public_path__ + \"static/media/userWhithoutAvatar.c2876ea8.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__25FvH\",\"posts\":\"MyPosts_posts__2XH4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3WLaz\"};","export default __webpack_public_path__ + \"static/media/contentLogo.95a560ea.png\";","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// extends React.Component<PropsType>\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n       setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div className={s.content}>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'STATUS'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div className={s.content}>\r\n                <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{contactTitle}:</b>{' ' + (contactValue !== null ? contactValue : '---')}</div>\r\n}","import {Contact} from \"./Contact\";\r\nimport React from \"react\";\r\nimport {UsersProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileDataType = {\r\n    profile: UsersProfileType\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nexport const ProfileData = ({profile, isOwner, onEditMode}: ProfileDataType) => {\r\n    return <div>\r\n        <div>\r\n            <b>Full Name:</b>{' ' + profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div><b>My professional skills:</b>{' ' + profile.lookingForAJobDescription}</div>}\r\n        <div>\r\n            <b>About me:</b> {' ' + (profile.aboutMe !== null ? profile.aboutMe : '---')}\r\n        </div>\r\n        <div><b>Contacts:</b>\r\n            {\r\n                Object.keys(profile.contacts).map((key) => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })\r\n            }\r\n        </div>\r\n        {\r\n            isOwner && <div>\r\n                <button onClick={onEditMode}>edit profile</button>\r\n            </div>\r\n        }\r\n    </div>\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {createField, Input, TextArea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {UsersProfileType} from \"../../../redux/profile-reducer\";\r\n\r\nexport type ProfileDataFormType = {\r\n    profile: UsersProfileType\r\n}\r\nconst ProfileDataForm: React.FC<ProfileDataFormType & InjectedFormProps<{}, ProfileDataFormType>> = (props) => {\r\n    const {\r\n        error,\r\n        handleSubmit,\r\n        profile\r\n    } = props\r\n    return <form onSubmit={handleSubmit}>\r\n        {error && <div className={s.formError}>{error}</div>}\r\n        <div>\r\n            <b>Full Name:</b>{createField(Input, 'Full Name', 'fullName', [])}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b>{createField(Input, '', 'lookingForAJob', [], {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills:</b>{createField(TextArea, 'My skills', 'lookingForAJobDescription', [])}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b> {createField(TextArea, 'About me', 'aboutMe', [])}\r\n        </div>\r\n        <div><b>Contacts:</b>\r\n            {\r\n                Object.keys(profile.contacts).map((key) => {\r\n                    return <div key={key} className={s.contacts}>\r\n                        <b>{key}:</b>{createField(Input, key, 'contacts.' + key, [])}\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <button>save</button>\r\n    </form>\r\n}\r\n\r\n\r\nexport const ProfileDataFormRedux = reduxForm<{}, ProfileDataFormType>({form: 'editProfile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport logo from './contentLogo.png'\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {UsersProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/userWhithoutAvatar.png\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {ProfileDataFormRedux} from './ProfileDataForm';\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: UsersProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: any) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo = (props: PropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = (value: boolean) => {\r\n        setEditMode(value)\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n\r\n    }\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const photo = e.target.files[0]\r\n            props.savePhoto(photo)\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <div><img src={logo} alt={'logo'}/></div>\r\n\r\n            <div style={{display: 'inline-flex'}}>\r\n                <b>Status: </b><ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} alt={'userPhoto'}/>\r\n            </div>\r\n            {props.isOwner &&\r\n            <input name={'change photo'} type={\"file\"} onChange={onMainPhotoSelected}/>\r\n            }\r\n            {\r\n                editMode ?\r\n                    <ProfileDataFormRedux\r\n                        onSubmit={onSubmit}\r\n                        initialValues={props.profile}\r\n                        profile={props.profile}\r\n                    />\r\n                    :\r\n                    <ProfileData\r\n                        onEditMode={() => onEditMode(true)}\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post = (props: PropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            {props.message}\r\n            <div>Like ({props.likeCount})</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst minLength2 = minLengthCreator(2)\r\n\r\nclass AddPostForm extends React.Component<InjectedFormProps<FormDataType>> {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        component={TextArea}\r\n                        name='newPostBody'\r\n                        placeholder='Enter Your Post Message'\r\n                        validate={[required, maxLength30, minLength2]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button>POST</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddPostForm)\r\n\r\nexport const MyPosts = React.memo((props: PropsType) => {\r\n\r\n    const postsElements = props.posts.map(p =>\r\n        <Post key={p.id} message={p.message} likeCount={p.likeCount}/>\r\n    )\r\n    const onAddNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div><h3> my posts </h3></div>\r\n            <AddPostFormRedux onSubmit={onAddNewPost}/>\r\n            <div className={s.posts}> {postsElements}  </div>\r\n        </div>\r\n    )\r\n})\r\n","import {addPostAC, PostsType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostAC(newPostBody))\r\n        },\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {UsersProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: UsersProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: any) => Promise<any>\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto,saveProfile, updateStatus, UsersProfileType} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: UsersProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: any) => Promise<any>\r\n}\r\ntype ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                debugger\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile})\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}