{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength30","maxLengthCreator","minLength2","minLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","compose","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oHCQ7MC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAMhC,OAAOC,YAAQN,EAARM,EALmB,SAACC,GAA8B,IAChDL,EAAwBK,EAAxBL,OAAWM,EADoC,YACvBD,EADuB,YAEpD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,6FCT7BC,EAAa,SAACH,GACvB,OACI,qBAAKI,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASL,GAAI,YAAcF,EAAMQ,GAAjC,SAAsCR,EAAMS,UCL3CC,EAAU,SAACV,GACpB,OACI,qBAAKI,UAAWC,IAAEM,QAAlB,SAA4BX,EAAMW,W,iCCGpCC,EAAcC,YAAiB,KAC/BC,EAAaC,YAAiB,GAoB9BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAlBsC,SAACjB,GAC/D,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXd,KAAK,iBACLe,YAAY,qBACZC,SAAU,CAACC,IAAUd,EAAaE,OAG1C,8BACI,kD,yBCODa,sBACX5B,aAhBoB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,gBAIA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAcD,SAQ/BlC,IAFW8B,EDCQ,SAAC3B,GACpB,IAAMiC,EAAkBjC,EAAM4B,YAAYM,QAAQC,KAAI,SAAAC,GAAC,OACnD,cAAC,EAAD,CAEI5B,GAAI4B,EAAE5B,GACNC,KAAM2B,EAAE3B,MAFH2B,EAAE5B,OAIT6B,EAAmBrC,EAAM4B,YAAYU,SAASH,KAAI,SAAAI,GAAC,OACrD,cAAC,EAAD,CAEI5B,QAAS4B,EAAE5B,SADN4B,EAAE/B,OAQf,OACI,sBAAKJ,UAAWC,IAAE6B,QAAlB,UACI,qBAAK9B,UAAWC,IAAEmC,aAAlB,SACKP,IAEL,qBAAK7B,UAAWC,IAAEiC,SAAlB,SACKD,IAEL,cAACrB,EAAD,CAAqBG,SAZP,SAACsB,GACnBzC,EAAM8B,YAAYW,EAAOV","file":"static/js/5.c32932f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__L5XeV\",\"dialogsItems\":\"Dialogs_dialogsItems__pBw0A\",\"active\":\"Dialogs_active__mVAbz\",\"dialog\":\"Dialogs_dialog__21QTH\",\"messages\":\"Dialogs_messages__17E9N\",\"message\":\"Dialogs_message__wFbjO\"};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = (props: PropsType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: PropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength30 = maxLengthCreator(300)\r\nconst minLength2 = minLengthCreator(2)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={TextArea}\r\n                    name='newMessageBody'\r\n                    placeholder='Enter Your Message'\r\n                    validate={[required, maxLength30, minLength2]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d =>\r\n        <DialogItem\r\n            key={d.id}\r\n            id={d.id}\r\n            name={d.name}\r\n        />)\r\n    const messagesElements = props.dialogsPage.messages.map(m =>\r\n        <Message\r\n            key={m.id}\r\n            message={m.message}\r\n        />)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {InitialStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}