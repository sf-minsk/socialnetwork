{"version":3,"sources":["hoc/withAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Myposts/MyPosts.module.css","components/Profile/Myposts/Post/Post.module.css","components/Profile/ProfileInfo/contentLogo.png","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Myposts/Post/Post.tsx","components/Profile/Myposts/MyPosts.tsx","components/Profile/Myposts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","content","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileInfo","profile","src","logo","alt","descriptionBlock","photos","large","Preloader","Post","item","message","likeCount","maxLength30","maxLengthCreator","minLength2","minLengthCreator","AddPostForm","onSubmit","this","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","React","AddPostFormRedux","reduxForm","form","MyPosts","memo","postsElements","posts","map","p","id","postsBlock","values","addPost","newPostBody","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.ef47c73f.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__gpbrc\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1nUcf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__25FvH\",\"posts\":\"MyPosts_posts__2XH4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3WLaz\"};","export default __webpack_public_path__ + \"static/media/contentLogo.95a560ea.png\";","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// extends React.Component<PropsType>\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n       setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div className={s.content}>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'STATUS'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div className={s.content}>\r\n                <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport logo from './contentLogo.png'\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {UsersProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: UsersProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: PropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <img src={logo} alt={'logo'}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt={'userPhoto'}/>\r\n                avatar + description\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post = (props: PropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            {props.message}\r\n            <div>Like ({props.likeCount})</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profile-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst minLength2 = minLengthCreator(2)\r\n\r\nclass AddPostForm extends React.Component<InjectedFormProps<FormDataType>> {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit}>\r\n                <div>\r\n                    <Field\r\n                        component={TextArea}\r\n                        name='newPostBody'\r\n                        placeholder='Enter Your Post Message'\r\n                        validate={[required, maxLength30, minLength2]}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button>POST</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddPostForm)\r\n\r\nexport const MyPosts = React.memo((props: PropsType) => {\r\n\r\n    const postsElements = props.posts.map(p =>\r\n        <Post key={p.id} message={p.message} likeCount={p.likeCount}/>\r\n    )\r\n    const onAddNewPost = (values: FormDataType) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div><h3> my posts </h3></div>\r\n            <AddPostFormRedux onSubmit={onAddNewPost}/>\r\n            <div className={s.posts}> {postsElements}  </div>\r\n        </div>\r\n    )\r\n})\r\n","import {addPostAC, PostsType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostBody: string) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostBody: string) => {\r\n            dispatch(addPostAC(newPostBody))\r\n        },\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./Myposts/MyPostsContainer\";\r\nimport {UsersProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: UsersProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, UsersProfileType} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: UsersProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype ProfilePropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                debugger\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus})\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}